% ##### display RGB channels #####

% Read in original RGB image.
rgbImage = imread('peppers.png');

% Extract color channels.
redChannel = rgbImage(:,:,1); % Red channel
greenChannel = rgbImage(:,:,2); % Green channel
blueChannel = rgbImage(:,:,3); % Blue channel
% Create an all black channel.
allBlack = zeros(size(rgbImage, 1), size(rgbImage, 2), 'uint8');

% Create color versions of the individual color channels.
just_red = cat(3, redChannel, allBlack, allBlack);
just_green = cat(3, allBlack, greenChannel, allBlack);
just_blue = cat(3, allBlack, allBlack, blueChannel);

% Recombine the individual color channels to create the original RGB image again.
recombinedRGBImage = cat(3, redChannel, greenChannel, blueChannel);

% Display them all.
subplot(3, 3, 2);
imshow(rgbImage);
fontSize = 20;
title('Original RGB Image', 'FontSize', fontSize)
subplot(3, 3, 4);
imshow(just_red);
title('Red Channel in Red', 'FontSize', fontSize)
subplot(3, 3, 5);
imshow(just_green)
title('Green Channel in Green', 'FontSize', fontSize)
subplot(3, 3, 6);
imshow(just_blue);
title('Blue Channel in Blue', 'FontSize', fontSize)
subplot(3, 3, 8);
imshow(recombinedRGBImage);
title('Recombined to Form Original RGB Image Again', 'FontSize', fontSize)

% Set up figure properties:
% Enlarge figure to full screen.
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0, 0, 1, 1]);
% Get rid of tool bar and pulldown menus that are along top of figure.
% set(gcf, 'Toolbar', 'none', 'Menu', 'none');
% Give a name to the title bar.
set(gcf, 'Name', 'Demo by ImageAnalyst', 'NumberTitle', 'Off')

% ##### edge detection image #####


originalImage = imread('peppers.png');

% Define kernel
edgeDetectionKernel = [0,-1,0;-1,4,-1;0,-1,0];
% Apply convolution 
Red = conv2(double(originalImage(:, :, 1)), edgeDetectionKernel, 'same');
Green = conv2(double(originalImage(:, :, 2)), edgeDetectionKernel, 'same');
Blue = conv2(double(originalImage(:, :, 3)), edgeDetectionKernel, 'same');

% Combine channels
edgeDetectionCombined = cat(3, Red, Green, Blue);

% Display 
figure;
imshow(uint8(edgeDetectionCombined));
title('edge detected image');



% ##### sharpened image  #####


originalImage = imread('peppers.png');

% Define kernel
sharpeningKernel = [0,-1,0;-1,5,-1;0,-1,0];
% Apply convolution 
Red = conv2(double(originalImage(:, :, 1)), sharpeningKernel, 'same');
Green = conv2(double(originalImage(:, :, 2)), sharpeningKernel, 'same');
Blue = conv2(double(originalImage(:, :, 3)), sharpeningKernel, 'same');

% Combine channels
sharpenedImageCombined = cat(3, Red, Green, Blue);

% Display 
figure;
imshow(uint8(sharpenedImageCombined));
title('sharpened image');


% ##### blurred image (average)  #####

originalImage = imread('peppers.png');

% Define  kernel
blurringkernel = ones(10,10)/100;
% Apply convolution 
Red = conv2(double(originalImage(:, :, 1)), blurringkernel, 'same');
Green = conv2(double(originalImage(:, :, 2)), blurringkernel, 'same');
Blue = conv2(double(originalImage(:, :, 3)), blurringkernel, 'same');

% Combine channels
blurredImageCombined = cat(3, Red, Green, Blue);

% Display 
figure;
imshow(uint8(blurredImageCombined));
title('blurred image');
% ##### horizontal motional blurring+restored image from motional blurring with noise removal #####

originalImage = imread('peppers.png');

% Define the motion blur kernel
motionBlurKernel = [0,0,0,0,0,0,0,0,0;
                    0,0,0,0,0,0,0,0,0;
                    0,0,0,0,0,0,0,0,0;
                    0,0,0,0,0,0,0,0,0;
                    1,1,1,1,1,1,1,1,1;
                    0,0,0,0,0,0,0,0,0;
                    0,0,0,0,0,0,0,0,0;
                    0,0,0,0,0,0,0,0,0;
                    0,0,0,0,0,0,0,0,0] / 9;

% Apply convolution to get motion-blurred image
Red = conv2(double(originalImage(:, :, 1)), motionBlurKernel, 'same');
Green = conv2(double(originalImage(:, :, 2)), motionBlurKernel, 'same');
Blue = conv2(double(originalImage(:, :, 3)), motionBlurKernel, 'same');

% Combine the motion-blurred channels
motionBlurImageCombined = cat(3, Red, Green, Blue);

% Display the motion-blurred image
figure;
imshow(uint8(motionBlurImageCombined));
title('Motion-Blurred Image');

% Convert motion-blurred image to the frequency domain
FDRed = fft2(double(motionBlurImageCombined(:, :, 1)));
FDGreen = fft2(double(motionBlurImageCombined(:, :, 2)));
FDBlue = fft2(double(motionBlurImageCombined(:, :, 3)));

% Define the motion blur kernel in the frequency domain
motionBlurKernelFreq = fft2(motionBlurKernel, size(originalImage, 1), size(originalImage, 2));

% Apply inverse filtering in the frequency domain
FDRed = FDRed ./ motionBlurKernelFreq;
FDGreen = FDGreen ./ motionBlurKernelFreq;
FDBlue = FDBlue ./ motionBlurKernelFreq;

% Combine the channels in the frequency domain
FDrestoredImageCombined = cat(3, FDRed, FDGreen, FDBlue);

% Convert the restored image back to the spatial domain
restoredImage = ifft2(FDrestoredImageCombined);

% Display the restored image
figure;
imshow(uint8(abs(restoredImage)));
title('Restored Image');
% ##### horizontal motional blurring + restored image from motional blurring without noise removal #####
originalImage = imread('peppers.png');

% Define the motion blur kernel
motionBlurKernel = [0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0;1,1,1,1,1,1,1,1,1;0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0]/9;;

% Apply convolution to get motion-blurred image
Red = conv2(double(originalImage(:, :, 1)), motionBlurKernel, 'same');
Green = conv2(double(originalImage(:, :, 2)), motionBlurKernel, 'same');
Blue = conv2(double(originalImage(:, :, 3)), motionBlurKernel, 'same');

% Combine the motion-blurred channels
motionBlurImageCombined = cat(3, Red, Green, Blue);

% Display the motion-blurred image
figure;
imshow(uint8(motionBlurImageCombined));
title('Motion-Blurred Image');

% Convert motion-blurred image to the frequency domain
FDRed = fft2(double(motionBlurImageCombined(:, :, 1)));
FDGreen = fft2(double(motionBlurImageCombined(:, :, 2)));
FDBlue = fft2(double(motionBlurImageCombined(:, :, 3)));

% Define the motion blur kernel in the frequency domain
motionBlurKernelFreq = fft2(motionBlurKernel, size(originalImage, 1), size(originalImage, 2));

% Apply inverse filtering in the frequency domain
snr = 0.2; % Signal-to-noise ratio parameter
FDRed = FDRed ./ (abs(motionBlurKernelFreq).^2 + snr);
FDGreen = FDGreen ./ (abs(motionBlurKernelFreq).^2 + snr);
FDBlue = FDBlue ./ (abs(motionBlurKernelFreq).^2 + snr);

% Combine the channels in the frequency domain
FDrestoredImageCombined = cat(3, FDRed, FDGreen, FDBlue);

% Convert the restored image back 
restoredImage = ifft2(FDrestoredImageCombined);

% Display the restored image
figure;
imshow(uint8(real(restoredImage)));
title('Restored Image');